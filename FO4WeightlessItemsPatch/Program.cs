using System;
using System.Threading.Tasks;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.FormKeys.Fallout4;
using Mutagen.Bethesda.Synthesis;

namespace FO4WeightlessItemsPatch
{
    public static class Program
    {
        private static Lazy<Settings> _settings;
        private static Settings Settings => _settings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<IFallout4Mod, IFallout4ModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.Fallout4, "WeightlessItems_Patch.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<IFallout4Mod, IFallout4ModGetter> state)
        {
            if (Settings.Ingestibles)
            {
                foreach (var ingestibleContext in state.LoadOrder.PriorityOrder.Ingestible().WinningContextOverrides())
                {
                    if(ingestibleContext.Record is null) continue;
                    if(ingestibleContext.Record.IsDeleted) continue;

                    var record = ingestibleContext.Record;

                    if (string.IsNullOrWhiteSpace(record.EditorID)) continue;
                    if (record.EditorID.StartsWith("hc_", StringComparison.OrdinalIgnoreCase))
                    {
                        if (record.Keywords != null)
                        {
                            var skip = false;
                            foreach (var keyword in record.Keywords)
                                if (keyword.FormKey == Fallout4.Keyword.HC_EffectType_Adrenaline.FormKey
                                    || keyword.FormKey == Fallout4.Keyword.HC_EffectType_Disease.FormKey
                                    || keyword.FormKey == Fallout4.Keyword.HC_IconColor_Red.FormKey
                                    || keyword.FormKey == Fallout4.Keyword.HC_EffectType_Hunger.FormKey
                                    || keyword.FormKey == Fallout4.Keyword.HC_EffectType_Sleep.FormKey
                                    || keyword.FormKey == Fallout4.Keyword.HC_EffectType_Thirst.FormKey
                                   )
                                {
                                    skip = true;
                                    break;
                                }

                            if (skip) continue;
                        }

                        if (record.EditorID.Equals("HC_Effect_Caffeinated", StringComparison.OrdinalIgnoreCase))
                            continue;
                    }

                    if (record.Model is null) continue;
                    if (record.Name is null || string.IsNullOrWhiteSpace(record.Name.String)) continue;

                    if (record.Weight != 0)
                    {
                        var newRecord = ingestibleContext.GetOrAddAsOverride(state.PatchMod);
                        newRecord.Weight = 0;
                    }
                }
            }

            if (Settings.Ammunition)
            {
                foreach (var ammunitionContext in state.LoadOrder.PriorityOrder.Ammunition().WinningContextOverrides())
                {
                    if(ammunitionContext.Record is null) continue;
                    if(ammunitionContext.Record.IsDeleted) continue;
                    
                    var record = ammunitionContext.Record;
                    if (record.Name is null || string.IsNullOrWhiteSpace(record.Name.String)) continue;
                    if(record.Flags.HasFlag(Ammunition.Flag.NonPlayable)) continue;

                    if (record.Weight != 0)
                    {
                        var newRecord = ammunitionContext.GetOrAddAsOverride(state.PatchMod);
                        newRecord.Weight = 0;
                    }
                }
            }
            
            if (Settings.BooksMagazines)
            {
                foreach (var bookContext in state.LoadOrder.PriorityOrder.Book().WinningContextOverrides())
                {
                    if(bookContext.Record is null) continue;
                    if(bookContext.Record.IsDeleted) continue;
                    
                    var record = bookContext.Record;

                    if (record.Weight != 0)
                    {
                        var newRecord = bookContext.GetOrAddAsOverride(state.PatchMod);
                        newRecord.Weight = 0;
                    }
                }
            }

            if (Settings.KeysPasscards)
            {
                foreach (var keyContext in state.LoadOrder.PriorityOrder.Key().WinningContextOverrides())
                {
                    if(keyContext.Record is null) continue;
                    if(keyContext.Record.IsDeleted) continue;
                    
                    var record = keyContext.Record;

                    if (record.Weight != 0)
                    {
                        var newRecord = keyContext.GetOrAddAsOverride(state.PatchMod);
                        newRecord.Weight = 0;
                    }
                }
            }
            
            if (Settings.NotesHolotapes)
            {
                foreach (var noteContext in state.LoadOrder.PriorityOrder.Holotape().WinningContextOverrides())
                {
                    if(noteContext.Record is null) continue;
                    if(noteContext.Record.IsDeleted) continue;
                    
                    var record = noteContext.Record;
                    if (record.Name is null || string.IsNullOrWhiteSpace(record.Name.String)) continue;

                    if (record.Weight != 0)
                    {
                        var newRecord = noteContext.GetOrAddAsOverride(state.PatchMod);
                        newRecord.Weight = 0;
                    }
                }
            }
            
            if (Settings.Mods || Settings.Misc)
            {
                foreach (var miscContext in state.LoadOrder.PriorityOrder.MiscItem().WinningContextOverrides())
                {
                    if(miscContext.Record is null) continue;
                    if(miscContext.Record.IsDeleted) continue;

                    var record = miscContext.Record;
                    if (record.Name is null || string.IsNullOrWhiteSpace(record.Name.String)) continue;

                    var isMod = !(record.PreviewTransform.IsNull || record.PreviewTransform.FormKey != Fallout4.Transform.MiscMod01.FormKey);

                    if (isMod)
                    {
                        var found = false;
                        if(record.Keywords != null)
                            foreach (var keyword in record.Keywords)
                            {
                                if(keyword.FormKey == Fallout4.Keyword.ObjectTypeLooseMod.FormKey)
                                {
                                    found = true;
                                    break;
                                }
                            }

                        if (!found) isMod = false;
                    }
                    
                    if(!Settings.Misc && !isMod) continue;
                    
                    if (record.Weight != 0)
                    {
                        var newRecord = miscContext.GetOrAddAsOverride(state.PatchMod);
                        newRecord.Weight = 0;
                    }
                }
            }
            
            if (Settings.Armors)
            {
                foreach (var armorContext in state.LoadOrder.PriorityOrder.Armor().WinningContextOverrides())
                {
                    if(armorContext.Record is null) continue;
                    if(armorContext.Record.IsDeleted) continue;
                    
                    var record = armorContext.Record;
                    if (record.Name is null || string.IsNullOrWhiteSpace(record.Name.String)) continue;
                    if(record.MajorFlags.HasFlag(Armor.MajorFlag.NonPlayable)) continue;

                    if (record.Weight != 0)
                    {
                        var newRecord = armorContext.GetOrAddAsOverride(state.PatchMod);
                        newRecord.Weight = 0;
                    }
                }
            }
            
            if (Settings.Weapons)
            {
                foreach (var weaponContext in state.LoadOrder.PriorityOrder.Weapon().WinningContextOverrides())
                {
                    if(weaponContext.Record is null) continue;
                    if(weaponContext.Record.IsDeleted) continue;
                    
                    var record = weaponContext.Record;
                    if (record.Name is null || string.IsNullOrWhiteSpace(record.Name.String)) continue;
                    if(record.MajorFlags.HasFlag(Weapon.MajorFlag.NonPlayable)) continue;
                    if(record.Flags.HasFlag(Weapon.Flag.NotPlayable)) continue;

                    if (record.Weight != 0)
                    {
                        var newRecord = weaponContext.GetOrAddAsOverride(state.PatchMod);
                        newRecord.Weight = 0;
                    }
                }
            }
        }
    }
}